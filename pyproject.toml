[tool.black]
target-version = ["py37"]
line-length = 79
skip-string-normalization = true
# https://black.readthedocs.io/en/stable/the_black_code_style/future_style.html
preview = true
enable-unstable-feature = ["multiline_string_handling", "string_processing", "wrap_long_dict_values_in_parens"]

[tool.ruff]
# https://beta.ruff.rs/docs/settings/
target-version = "py37"
line-length = 79

[tool.ruff.lint]
preview = true
select = [
    "ALL",  # to get a list of all values: `python3 -m ruff linter`
]
ignore = [
    "A",  # flake8-builtins
    "ANN",  # flake8-annotations
    "ARG",  # flake8-unused-arguments
    "B007",  # Loop control variable `x` not used within loop body
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err` (PYTHON2.7 COMPAT)
    "B904",  # Use `raise from` to specify exception cause (PYTHON2.7 COMPAT)
    "BLE001",  # Do not catch blind exception: `Exception`
    "C4",  # flake8-comprehensions (PYTHON2.7 COMPAT)
    # "C408",  # Unnecessary `dict` call (rewrite as a literal)
    "C90",  # mccabe (function `X` is too complex)
    "COM812",  # Trailing comma missing
    "D",  # pydocstyle
    "DTZ",  # flake8-datetimez
    "E203",  # [*] Whitespace before ':' (clashes with black)
    "EM",  # flake8-errmsg
    "ERA001",  # Found commented-out code
    "F841",  # Local variable `wr` is assigned to but never used
    "FBT",  # flake8-boolean-trap
    "FIX",  # Line contains TODO / XXX / ..., consider resolving the issue
    "FLY",  # flynt (PYTHON2.7 COMPAT)
    "FURB101",  # `open` and `read` should be replaced by `Path(x).read_text()`
    "FURB103",  # `open` and `write` should be replaced by `Path(...).write_bytes(data)`
    "FURB113",  # Use `s.extend(...)` instead of repeatedly calling `s.append()`
    "INP",  # flake8-no-pep420
    "N801",  # Class name `async_chat` should use CapWords convention (ASYNCORE COMPAT)
    "N802",  # Function name X should be lowercase.
    "N803",  # Argument name X should be lowercase.
    "N806",  # Variable X in function should be lowercase.
    "N812",  # Lowercase `error` imported as non-lowercase `FooBarError`
    "N818",  # Exception name `FooBar` should be named with an Error suffix
    "PERF",  # Perflint
    "PGH004",  # Use specific rule codes when using `noqa`
    "PLC0415",  # `import` should be at the top-level of a file
    "PLC2701",  # Private name import `_winreg`
    "PLR",  # pylint
    "PLW",  # pylint
    "PT",  # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "PYI",  # flake8-pyi
    "Q000",  # Single quotes found but double quotes preferred
    "RET",  # flake8-return
    "RUF",  # Ruff-specific rules
    "S",  # flake8-bandit
    "SIM102",  # Use a single `if` statement instead of nested `if` statements
    "SIM105",  # Use `contextlib.suppress(OSError)` instead of `try`-`except`-`pass`
    "SIM115",  # Use context handler for opening files
    "SIM117",  # Use a single `with` statement with multiple contexts instead of nested `with` statements
    "SLF",  # flake8-self
    "TD",  # all TODOs, XXXs, etc.
    "TRY003",  # Avoid specifying long messages outside the exception class
    "TRY300",  # Consider moving this statement to an `else` block
    "TRY301",  # Abstract `raise` to an inner function
    "UP010",  # [*] Unnecessary `__future__` import `print_function` for target Python version (PYTHON2.7 COMPAT)
    "UP024",  # [*] Replace aliased errors with `OSError` (PYTHON2.7 COMPAT)
    "UP031",  # [*] Use format specifiers instead of percent format
]

[tool.ruff.lint.per-file-ignores]
".git_pre_commit.py" = ["T201"]  # T201 == print()
"demo/*" = ["T201"]
"doc/*" = ["T201"]
"scripts/*" = ["T201"]
"setup.py" = ["T201"]

[tool.ruff.lint.isort]
# https://beta.ruff.rs/docs/settings/#isort
force-single-line = true  # one import per line
lines-after-imports = 2

[tool.coverage.report]
omit = [
    "pyftpdlib/_compat.py",
    "pyftpdlib/test/*",
    "setup.py",
]
exclude_lines = [
    "except ImportError:",
    "if PY3:",
    "if __name__ == .__main__.:",
    "if hasattr(select, 'devpoll'):",
    "if hasattr(select, 'epoll'):",
    "if hasattr(select, 'kqueue'):",
    "if hasattr(select, 'kqueue'):",
    "if os.name == 'nt':",
    "pragma: no cover",
    "raise NotImplementedError('must be implemented in subclass')",
]

[tool.pylint.messages_control]
disable = [
    "broad-except",
    "consider-using-f-string",
    "fixme",
    "import-outside-toplevel",
    "inconsistent-return-statements",
    "invalid-name",
    "logging-not-lazy",
    "misplaced-bare-raise",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "no-else-continue",
    "no-else-raise",
    "no-else-return",
    "protected-access",
    "raise-missing-from",
    "redefined-builtin",
    "too-few-public-methods",
    "too-many-instance-attributes",
    "ungrouped-imports",
    "unspecified-encoding",
    "use-maxsplit-arg",
    "useless-object-inheritance",
]

[tool.rstcheck]
ignore_messages = [
    "Unexpected possible title overline or transition",
]

[tool.tomlsort]
in_place = true
no_sort_tables = true
sort_inline_arrays = true
spaces_before_inline_comment = 2
spaces_indent_inline_array = 4
trailing_comma_inline_array = true

 [tool.isort]
force_single_line = true  # one import per line
lines_after_imports = 2  # blank spaces after import section

[tool.ruff]
# https://beta.ruff.rs/docs/settings/
target-version = "py38"
line-length = 79
# to get a list of all values: `python3 -m ruff linter`
select = [
    # "ALL",
    "B",  # flake8-bugbear
    "E",  # pycodestyle
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "Q",  # flake8 quotes
    "SIM",  # flake8-simplify
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "UP",  # pyupgrade
    "YTT",  # flake8-2020
]

ignore = [
    "B007",  # Loop control variable `x` not used within loop body
    "N802",  # Function name X should be lowercase.
    "N803",  # Argument name X should be lowercase.
    "N806",  # Variable X in function should be lowercase.
    "N817",  # CamelCase X imported as acronym X.
    "Q000",  # Single quotes found but double quotes preferred

    # "ANN",  # missing annotation
    # "D",  # pydocstyle
    # "FIX",  # Line contains TODO / XXX / ..., consider resolving the issue
    # "PT",  # pytest
    # "EM",    # flake8-errmsg
    # "ARG",  # flake8-unused-arguments
    # "PTH",  # Use pathlib instead of os.path
    # "RET",  # flake8-return
    # "SLF",  # flake8-self
    # "FLY",  # flynt
    # "TD",  # all TODOs, XXXs, etc.

    "A001",  # Variable `X` is shadowing a Python builtin
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err`
    "C408",  # Unnecessary `dict` call (rewrite as a literal)
    "COM812",  # Trailing comma missing
    "ERA001",  # Found commented-out code
    "FBT002", #  Boolean default positional argument in function definition
    "FBT003", # Boolean positional value in function call
    "G004", # Logging statement uses f-string
    "N801",  # Class name `async_chat` should use CapWords convention
    "N812",  # Lowercase `error` imported as non-lowercase `FooBarError`
    "N818",  # Exception name `FooBar` should be named with an Error suffix
    "PGH004",  # Use specific rule codes when using `noqa`
    "PT009",  # Use a regular `assert` instead of unittest-style `assertTrue`
    "S101",  # Use of 'assert' detected
    "SIM102",  # Use a single `if` statement instead of nested `if` statements
    "SIM105",  # Use `contextlib.suppress(OSError)` instead of `try`-`except`-`pass`
    "SIM115",  # Use context handler for opening files
    "SIM117", # Use a single `with` statement with multiple contexts instead of nested `with` statements
    "UP004",  # [*] Class `_Base` inherits from `object`
    "UP008",  #  [*] Use `super()` instead of `super(__class__, self)`
    "UP010",  # [*] Unnecessary `__future__` import `print_function` for target Python version
    "UP024",  # [*] Replace aliased errors with `OSError`
    "UP031",  # [*] Use format specifiers instead of percent format
]

[tool.ruff.per-file-ignores]
".git_pre_commit.py" = ["T201"]  # print()
"demo/*" = ["T201"]  # print()
"doc/*" = ["T201"]  # print()
"pyftpdlib/test/runner.py" = ["T201"]  # print()
"scripts/*" = ["T201"]  # print()
"setup.py" = ["T201"]  # print()
"sysconf.py" = ["T201"]  # print()

[tool.ruff.isort]
# https://beta.ruff.rs/docs/settings/#isort
force-single-line = true  # one import per line
lines-after-imports = 2

[tool.coverage.report]
omit = [
    "pyftpdlib/_compat.py",
    "pyftpdlib/test/*",
    "setup.py",
]
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "except ImportError:",
    "if os.name == 'nt':",
    "raise NotImplementedError('must be implemented in subclass')",
    "if hasattr(select, 'epoll'):",
    "if hasattr(select, 'kqueue'):",
    "if PY3:",
    "if hasattr(select, 'devpoll'):",
    "if hasattr(select, 'kqueue'):",
]

[tool.pylint.messages_control]
disable = [
    "broad-except",
    "consider-using-f-string",
    "fixme",
    "import-outside-toplevel",
    "inconsistent-return-statements",
    "invalid-name",
    "logging-not-lazy",
    "misplaced-bare-raise",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "no-else-continue",
    "no-else-raise",
    "no-else-return",
    "protected-access",
    "raise-missing-from",
    "redefined-builtin",
    "too-few-public-methods",
    "too-many-instance-attributes",
    "ungrouped-imports",
    "unspecified-encoding",
    "use-maxsplit-arg",
    "useless-object-inheritance",
]
